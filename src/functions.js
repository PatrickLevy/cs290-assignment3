/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction(){
	var useless = null;
	//console.log("useless = " + useless);
	return useless;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
var successful = true;
var val;
var i;
bar = function(doubleArray){
	for (i = 0; i < doubleArray.length; i++){
		val = doubleArray[i];
		doubleArray[i] = doubleArray[i] * 2;
		if ((val * 2) !== doubleArray[i]){
			successful = false;
		}
	}
	return successful;
};
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(logArray) {
var hashString, dateObject, dateString, messageString, pos1, pos2, i;
	var gitLogs = new Array();
	for (i = 0; i < logArray.length; i++) {
		//Extract the hash from the git log
		pos1 = logArray[i].indexOf(" ");
		hashString = logArray[i].slice(0, pos1);
		console.log(pos1);
		console.log("Hash = " + hashString);

		//Extract the date from the git log
		pos2 = logArray[i].indexOf('"');
		dateString = logArray[i].slice(pos1 + 1, pos2);
		console.log(pos2);
		console.log('Date = ' + dateString);
		dateObject = new Date(dateString);
		console.log(dateObject);

		//Extract the message from the git log
		messageString = logArray[i].slice(pos2 + 1, logArray[i].length - 1);
		console.log("Message = " + messageString);

		//Create gitLog objects
		
		gitLogs.push(new GitLog(hashString, dateObject, messageString) );
		//gitLogs[i] = (new GitLog(hashString, dateObject, messageString));
		
		console.log("the hash of object = " + gitLogs[i].hash);
		console.log("the date of object = " + gitLogs[i].date);
		console.log("the message of object = " + gitLogs[i].message);
	}
	
	return gitLogs;

}
//end your code
